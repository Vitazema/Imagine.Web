# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:lts-alpine

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

cache:
  paths:
    - node_modules/

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE

build:
  stage: build
  tags:
    - docker
    - windows
  script:
    - echo "Building image..."
    - chmod +x ./build-scripts/build.sh
    - ./build-scripts/build.sh

test_unit_tests:
  stage: test
  tags:
    - docker
    - windows
  before_script:
    - cd src
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    reports:
      junit: junit.xml


build_image:
  stage: deploy
  tags:
    - shell
    - linux
  only:
    - master
  before_script:
    - echo "Tagging the image:"
    - export APP_VERSION=$(cat package.json | jq -r .version)
    # - export VERSION=$APP_VERSION-$CI_PIPELINE_IID
    - echo $APP_VERSION > version-tag.txt
  script:
    - echo "Building image... and tagging the docker image $IMAGE_NAME:$APP_VERSION"
    - docker build -t $IMAGE_NAME:$APP_VERSION .
  artifacts:
    paths:
      - version-tag.txt

push_image:
  stage: deploy
  tags:
    - shell
    - linux
  only:
    - master
  needs:
    - build_image
  dependencies:
    - build_image
  before_script:
    - export VERSION=$(cat version-tag.txt)
    - echo "Logging into docker registry..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION

deploy:
  stage: deploy
  tags:
    - shell
    - linux
  only:
    - master
  needs:
    - push_image
  dependencies:
    - push_image
  environment: production
  before_script:
    - export VERSION=$(cat version-tag.txt)
    - export DC_IMAGE_NAME=$IMAGE_NAME
    - export DC_IMAGE_TAG=$VERSION
    - echo "Logging into docker registry..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker compose up -d
